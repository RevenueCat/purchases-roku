function IdentityTests(t)
    t.describe("Identity Tests", sub(t)
        t.beforeEach(sub(t)
            p = _InternalPurchases()
            p.configuration.configure({ apiKey: Constants().TEST_API_KEY })
            p.registry.clear()
            t.addContext({ purchases: p })
        end sub)

        t.it("Generates anonymous user ids", sub(t)
            t.assert.isTrue(t.purchases.isAnonymous(), "Expected anonymous user id")
            t.assert.isTrue(t.purchases.appUserId().startsWith("$RCAnonymousID:"), "Expected anonymous user id")
            t.pass()
        end sub)

        t.it("Logs in with app user id", sub(t)
            result = t.purchases.login("myappuserid")
            t.assert.isFalse(t.purchases.isAnonymous(), "Expected non-anonymous user id")
            t.assert.equal(t.purchases.appUserId(), "myappuserid", "Unexpected user id")

            t.assert.isValid(result, "Login result error")
            t.assert.isInvalid(result.error, "Unexpected error")
            subscriber = result.data
            t.assert.isValid(subscriber, "Subscriber data error")
            t.assert.isValid(subscriber.entitlements, "Entitlements error")
            t.assert.isValid(subscriber.first_seen, "First seen error")
            t.assert.isValid(subscriber.last_seen, "Last seen error")
            t.assert.isInvalid(subscriber.management_url, "Management URL error")
            t.assert.isValid(subscriber.non_subscriptions, "Non subscriptions error")
            t.assert.isValid(subscriber.original_app_user_id, "Original app user ID error")
            t.assert.isInvalid(subscriber.original_application_version, "Original application version error")
            t.assert.isInvalid(subscriber.original_purchase_date, "Original purchase date error")
            t.assert.isValid(subscriber.other_purchases, "Other purchases error")
            t.assert.isValid(subscriber.subscriptions, "Subscriptions error")
            t.pass()
        end sub)

        t.it("Log out generates new anonymous id", sub(t)
            t.assert.isTrue(t.purchases.isAnonymous(), "Expected anonymous user id")
            t.assert.isTrue(t.purchases.appUserId().startsWith("$RCAnonymousID:"), "Expected anonymous user id")
            initialAnonymousId = t.purchases.appUserId()
            t.purchases.login("myappuserid")
            t.assert.isFalse(t.purchases.isAnonymous(), "Expected non-anonymous user id")
            t.assert.equal(t.purchases.appUserId(), "myappuserid", "Unexpected user id")
            result = t.purchases.logout()

            t.assert.isTrue(t.purchases.isAnonymous(), "Expected anonymous user id")
            t.assert.isTrue(t.purchases.appUserId().startsWith("$RCAnonymousID:"), "Expected anonymous user id")
            t.assert.notEqual(t.purchases.appUserId(), initialAnonymousId, "Unexpected user id")

            t.assert.isValid(result, "Logout result error")
            t.assert.isInvalid(result.error, "Unexpected error")
            subscriber = result.data
            t.assert.isValid(subscriber, "Subscriber data error")
            t.assert.isValid(subscriber.entitlements, "Entitlements error")
            t.assert.isValid(subscriber.first_seen, "First seen error")
            t.assert.isValid(subscriber.last_seen, "Last seen error")
            t.assert.isInvalid(subscriber.management_url, "Management URL error")
            t.assert.isValid(subscriber.non_subscriptions, "Non subscriptions error")
            t.assert.isValid(subscriber.original_app_user_id, "Original app user ID error")
            t.assert.isInvalid(subscriber.original_application_version, "Original application version error")
            t.assert.isInvalid(subscriber.original_purchase_date, "Original purchase date error")
            t.assert.isValid(subscriber.other_purchases, "Other purchases error")
            t.assert.isValid(subscriber.subscriptions, "Subscriptions error")
            t.pass()
        end sub)
    end sub)
end function